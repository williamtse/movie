<?php

namespace backend\modules\movie\controllers;

use common\models\Actor;
use common\models\Category;
use common\models\Director;
use common\models\MovieActor;
use common\models\MovieCategory;
use common\models\MovieDirector;
use Yii;
use common\models\Movie;
use common\models\SearchMovie;
use yii\base\Exception;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
function checkdir($dir){
    if(!is_dir($dir)){
        mkdir($dir);
    }
}

function implodeArr($arr){
    $res = [];
    foreach($arr as $a){
        if(isset($a['name'])){
            $res[]=$a['name'];
        }
    }
    return $res;
}
function saveinfos(){
    $categories = explode('/',Yii::$app->request->post('categories'));
    $actors = explode('/',Yii::$app->request->post('actors'));
    $directors = explode('/',Yii::$app->request->post('directors'));
    foreach ($categories as $cate){
        $category=Category::findOne(['name'=>$cate]);
        if(!$category){
            $category = new Category();
            $category->name = $cate;
            $category->created_at = time();
            if(!$category -> save()){
                var_dump($category->errors);exit();
            }
        }
        $cid = $category->id;
        $movie_cate= MovieCategory::findOne(['mid'=>$model->id,'cid'=>$cid]);
        if(!$movie_cate){
            $movie_cate = new MovieCategory();
            $movie_cate->mid=$model->id;
            $movie_cate->cid=$cid;
            $movie_cate->save();
        }
    }

    foreach ($actors as $act){
        $actor=Actor::findOne(['name'=>$act]);
        if(!$actor){
            $actor = new Actor();
            $actor->name = $act;
            $actor->created_at = time();
            $actor -> save();
        }
        $aid = $actor->id;
        $movie_act= MovieActor::findOne(['mid'=>$model->id,'aid'=>$aid]);
        if(!$movie_act){
            $movie_act = new MovieActor();
            $movie_act->mid=$model->id;
            $movie_act->aid=$aid;
            $movie_act->save();
        }
    }

    foreach ($directors as $dire){
        $director=Director::findOne(['name'=>$dire]);
        if(!$director){
            $director = new Director();
            $director->name = $dire;
            $director->created_at = time();
            $director -> save();
        }
        $did = $director->id;
        $movie_dire= MovieDirector::findOne(['mid'=>$model->id,'did'=>$did]);
        if(!$movie_dire){
            $movie_dire = new MovieDirector();
            $movie_dire->mid=$model->id;
            $movie_dire->did=$did;
            $movie_dire->save();
        }
    }
}
/**
 * MovieController implements the CRUD actions for Movie model.
 */
class MovieController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                    'upload_poster'=>['POST']
                ],
            ],
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->enableCsrfValidation = false;
    }

    /**
     * Lists all Movie models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new SearchMovie();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Movie model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Movie model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Movie();


        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            saveinfos();
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing Movie model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        $sql = "SELECT c.name from movie_category mc LEFT JOIN category c ON c.id=mc.cid WHERE mc.mid=$id";
        $cmd = Yii::$app->db->createCommand($sql);
        $cates = implodeArr($cmd->queryAll());
        $sql = "SELECT a.name from movie_actor ma LEFT JOIN actor a ON a.id=ma.aid WHERE ma.mid=$id";
        $cmd = Yii::$app->db->createCommand($sql);
        $acts = implodeArr($cmd->queryAll());
        $sql = "SELECT d.name from movie_director md LEFT JOIN director d ON d.id=md.did WHERE md.mid=$id";
        $cmd = Yii::$app->db->createCommand($sql);
        $dires = implodeArr($cmd->queryAll());
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            saveinfos();
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
                'categories'=>$cates,
                'directors'=>$dires,
                'actors'=>$acts
            ]);
        }
    }

    /**
     * Deletes an existing Movie model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Movie model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Movie the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Movie::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
